$:.unshift(File.join("lib") )
puts "This allows us to generate three *.csv files which are setup for easy plotting in Excel, allowing us to full vet out the performance of the bandwidth determinations.  Further iterations of this project will include additional bandwidthing algorithms, likely because this first one is deficient in some way."

require 'kder'
require 'distribution'

# Preparation Steps
  normal = Distribution::Normal.rng(1)
  # generated by R command : rbinom(1000, 100, c(0.3,0.7))
  binomial = [0, 25, 63, 29, 77, 30, 68, 28, 68, 32, 71, 24, 75, 39, 77, 29, 74, 31, 73, 28, 66, 34, 69, 32, 76, 29, 73, 30, 71, 23, 65, 31, 66, 37, 66, 37, 67, 34, 67, 26, 72, 27, 73, 25, 68, 32, 63, 25, 67, 30, 80, 30, 71, 40, 76, 28, 72, 33, 71, 35, 78, 33, 74, 29, 64, 35, 69, 26, 71, 35, 65, 30, 70, 25, 63, 35, 73, 24, 71, 22, 72, 33, 70, 27, 69, 31, 75, 35, 73, 26, 71, 28, 74, 34, 63, 28, 74, 28, 72, 32, 66, 32, 61, 29, 67, 30, 65, 26, 77, 29, 73, 27, 66, 24, 71, 26, 74, 35, 68, 22, 74, 33, 79, 24, 67, 30, 65, 26, 59, 23, 66, 32, 69, 31, 63, 20, 74, 31, 71, 22, 63, 26, 63, 35, 76, 28, 70, 22, 65, 23, 67, 23, 68, 28, 67, 29, 75, 29, 63, 34, 66, 25, 72, 30, 71, 36, 74, 31, 70, 25, 61, 28, 68, 33, 73, 33, 67, 35, 70, 30, 65, 32, 64, 38, 75, 21, 66, 29, 59, 24, 61, 35, 70, 35, 65, 35, 67, 36, 66, 25, 69, 31, 58, 31, 67, 32, 68, 28, 74, 32, 75, 28, 71, 35, 77, 30, 73, 41, 59, 24, 75, 36, 73, 27, 59, 28, 75, 31, 68, 23, 75, 22, 72, 32, 75, 28, 64, 26, 69, 21, 72, 31, 69, 25, 65, 23, 66, 33, 75, 33, 74, 28, 70, 32, 63, 28, 72, 26, 76, 35, 83, 33, 79, 38, 64, 32, 71, 32, 67, 30, 72, 33, 68, 20, 69, 24, 75, 30, 63, 29, 72, 37, 63, 31, 69, 26, 74, 29, 67, 41, 65, 29, 60, 31, 67, 20, 73, 28, 67, 27, 67, 36, 73, 24, 63, 28, 70, 28, 72, 33, 75, 37, 80, 27, 69, 34, 70, 30, 64, 37, 78, 29, 63, 28, 64, 40, 71, 32, 79, 28, 61, 32, 73, 27, 71, 28, 68, 29, 70, 28, 65, 31, 75, 25, 59, 31, 76, 32, 65, 18, 56, 27, 67, 34, 62, 24, 77, 34, 68, 29, 67, 48, 69, 27, 64, 25, 72, 32, 71, 27, 72, 31, 71, 30, 62, 36, 72, 26, 77, 23, 80, 33, 69, 28, 69, 33, 68, 26, 74, 31, 62, 33, 77, 31, 65, 27, 66, 39, 75, 39, 65, 31, 66, 27, 71, 37, 65, 23, 63, 27, 71, 30, 62, 33, 69, 30, 69, 27, 65, 39, 66, 35, 64, 34, 72, 27, 71, 33, 68, 35, 73, 21, 69, 41, 62, 33, 64, 31, 64, 26, 76, 29, 81, 38, 67, 24, 74, 20, 71, 35, 78, 36, 70, 30, 67, 36, 71, 23, 67, 26, 69, 26, 73, 27, 62, 27, 73, 32, 75, 36, 69, 31, 59, 28, 72, 32, 70, 25, 68, 27, 64, 21, 72, 28, 73, 28, 70, 28, 75, 24, 66, 28, 72, 32, 69, 26, 81, 34, 74, 35, 74, 37, 71, 29, 71, 27, 81, 24, 69, 29, 70, 30, 66, 34, 64, 37, 72, 30, 70, 35, 74, 43, 77, 26, 72, 23, 70, 28, 73, 23, 77, 31, 68, 25, 64, 28, 75, 26, 71, 27, 70, 30, 68, 30, 70, 35, 68, 25, 60, 25, 67, 29, 67, 32, 60, 31, 62, 32, 69, 31, 74, 31, 71, 32, 79, 28, 77, 34, 65, 35, 79, 29, 76, 29, 63, 19, 73, 39, 67, 31, 75, 30, 70, 28, 72, 38, 62, 23, 74, 22, 67, 33, 67, 30, 76, 35, 78, 38, 63, 31, 71, 23, 73, 33, 76, 25, 69, 27, 75, 19, 67, 36, 70, 28, 72, 31, 73, 30, 62, 27, 72, 31, 76, 25, 73, 28, 64, 24, 66, 28, 76, 32, 73, 22, 62, 32, 69, 22, 61, 27, 64, 30, 65, 31, 75, 37, 72, 28, 72, 32, 65, 26, 73, 24, 72, 32, 64, 36, 66, 19, 75, 25, 74, 26, 67, 25, 64, 27, 74, 51, 61, 25, 69, 30, 65, 34, 63, 33, 76, 31, 73, 31, 73, 30, 64, 28, 66, 21, 64, 25, 72, 30, 78, 28, 68, 27, 78, 29, 62, 34, 75, 34, 72, 29, 76, 35, 76, 32, 72, 32, 75, 30, 73, 31, 77, 35, 76, 40, 65, 31, 71, 26, 61, 32, 66, 29, 74, 25, 72, 27, 80, 32, 72, 31, 64, 17, 66, 35, 76, 29, 65, 33, 70, 36, 75, 30, 73, 35, 79, 36, 66, 25, 75, 25, 70, 26, 61, 31, 71, 22, 78, 27, 69, 24, 76, 32, 77, 41, 70, 22, 63, 30, 67, 26, 66, 30, 65, 20, 70, 22, 75, 25, 76, 28, 74, 35, 64, 26, 68, 29, 71, 28, 73, 29, 74, 27, 64, 32, 72, 29, 72, 37, 72, 28, 72, 37, 70, 30, 67, 39, 70, 25, 71, 29, 80, 31, 72, 25, 71, 30, 64, 29, 68, 34, 70, 27, 78, 41, 69, 26, 68, 43, 68, 27, 71, 27, 67, 36, 71, 28, 72, 31, 65, 26, 70, 32, 62, 29, 65, 24, 56, 28, 62, 25, 68, 30, 72, 25, 63, 25, 70, 34, 75, 31, 80, 25, 65, 26, 75, 25, 59, 28, 70, 28, 66, 32, 71, 26, 77, 33, 71, 26, 67, 23, 70, 29, 77, 25, 71, 30, 67, 32, 66, 27, 71, 38, 71, 37, 67, 31, 69, 32, 72, 30, 71, 32, 69, 32, 71, 36, 70, 28, 71, 32, 71, 23, 69, 27, 61, 31, 67, 30, 72, 29, 74, 38, 70, 28, 71, 31, 69, 26, 69, 33, 74, 37, 72, 34, 67, 44, 70, 31, 67, 27, 66, 28, 65, 30, 71, 37, 57, 34, 72, 25, 60, 35, 71, 28, 66, 32, 75, 28, 75, 37, 66, 26, 71, 28, 75, 26, 67, 29, 71, 30, 67, 23, 72, 22, 68, 31, 67, 31, 74, 25, 62, 38, 62, 29, 74, 31, 68, 26, 69, 30, 72, 40, 59, 34, 73, 27, 69] 

Number = 1_000
MaximumVal = 100
HistogramBinWidth = 1
# test cases

Types = { 
  "Normal" => Number.times.map { normal.call*MaximumVal}, 
  "Binomial" => binomial,
  "Random" => Number.times.map { rand(MaximumVal) } 
}
# test histogram thing
sigs = [2, 3]
meshes = [5e2]
tvs = [1e-1]
Types.each do |type, arr|
  # setup bandwidths and truth histogram
  bandwidth = Bandwidth.silverman(arr)
  bandwidths = [bandwidth/2.0, bandwidth, bandwidth*2, bandwidth*3]
  histogram = Hash[arr.group_by {|x| x.round / HistogramBinWidth}.map {|k, vs| [(HistogramBinWidth*k+(HistogramBinWidth*k+HistogramBinWidth))/2, vs.size]}].to_a.sort.transpose
  File.open("#{type}.csv", "w") do |out|
    out.puts "Title, Optimizing Values for a #{type.capitalize} Distribution"
    out.puts "The estimated bandwidth was: #{bandwidth}"
    out.puts "Truth Values; bin width = #{HistogramBinWidth}"
    histogram.each do |line| 
      out.puts line.join(",")
    end
    sigs.each do |sig|
      bandwidths.each do |bw|
        meshes.each do |mesh|
          tvs.each do |tv|
            resp = Kder.kde(arr, bw, {sigmas: sig, sampling_density: mesh, threshold: tv})
            out.puts "Sig: #{sig}; Mesh: #{mesh}; BW: #{bw}; Threshold: #{tv}"
            resp.each do |line|
              out.puts line.join(',')
            end
          end
        end
      end
    end
  end # File.open
end #Types.each 
